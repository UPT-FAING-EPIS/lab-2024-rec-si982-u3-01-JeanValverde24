name: Construcción infraestructura en Azure

on:
  push:
    branches: [ "main" ]
    paths:
      - 'infra/**'
      - '.github/workflows/infra.yml'
  workflow_dispatch:

jobs:
  Deploy-infra:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login Azure
        run: |
          az login -u ${{ secrets.AZURE_USERNAME }} -p ${{ secrets.AZURE_PASSWORD }}

      - name: Create terraform.tfvars
        run: |
          cd infra
          echo "suscription_id=\"${{ secrets.SUSCRIPTION_ID }}\"" > terraform.tfvars
          echo "sqladmin_username=\"${{ secrets.SQL_USER }}\"" >> terraform.tfvars
          echo "sqladmin_password=\"${{ secrets.SQL_PASS }}\"" >> terraform.tfvars

      # 🔍 Escaneo de seguridad con Trivy y anotaciones
      - name: Scan Terraform with Trivy
        id: trivy_scan
        run: |
          TRIVY_OUTPUT=$(trivy config --format json ./infra)
          echo "$TRIVY_OUTPUT" > trivy_report.json

          # Generar anotaciones en GitHub Actions y un resumen
          echo "## Trivy Security Report" >> $GITHUB_STEP_SUMMARY
          HIGH_COUNT=$(jq '[.Results[].Misconfigurations[] | select(.Severity=="HIGH")] | length' trivy_report.json)
          CRITICAL_COUNT=$(jq '[.Results[].Misconfigurations[] | select(.Severity=="CRITICAL")] | length' trivy_report.json)

          if [[ "$HIGH_COUNT" -gt 0 ]]; then
            echo "::warning:: Trivy encontró $HIGH_COUNT problemas de alta severidad en Terraform."
          fi
          if [[ "$CRITICAL_COUNT" -gt 0 ]]; then
            echo "::error:: Trivy encontró $CRITICAL_COUNT problemas críticos en Terraform."
          fi

          echo "🔍 Total HIGH: **$HIGH_COUNT**" >> $GITHUB_STEP_SUMMARY
          echo "🚨 Total CRITICAL: **$CRITICAL_COUNT**" >> $GITHUB_STEP_SUMMARY

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: cd infra && terraform init 

      - name: Terraform Validate
        id: validate
        run: cd infra && terraform validate -no-color

      - name: Terraform Plan
        run: cd infra && terraform plan -var="suscription_id=${{ secrets.SUSCRIPTION_ID }}" -var="sqladmin_username=${{ secrets.SQL_USER }}" -var="sqladmin_password=${{ secrets.SQL_PASS }}" -no-color -out main.tfplan

      - name: Create Terraform Plan Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(cd infra && terraform show -no-color main.tfplan)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -var="suscription_id=${{ secrets.SUSCRIPTION_ID }}" -var="sqladmin_username=${{ secrets.SQL_USER }}" -var="sqladmin_password=${{ secrets.SQL_PASS }}" -auto-approve main.tfplan

      - name: Terraform Destroy
        if: always()  # Ejecutar siempre, incluso si Apply falla
        run: |
          cd infra
          terraform destroy -var="suscription_id=${{ secrets.SUSCRIPTION_ID }}" -var="sqladmin_username=${{ secrets.SQL_USER }}" -var="sqladmin_password=${{ secrets.SQL_PASS }}" -auto-approve
